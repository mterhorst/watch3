# Workflow name
name: Publish Native AOT + Docker Image

on: [workflow_dispatch]

permissions:
  contents: write
  packages: write

jobs:
  build-linux:
    name: Build for Linux
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'

      - name: Publish Native AOT
        run: |
          dotnet publish src/Watch3.csproj \
            -c Release \
            -p:PublishAot=true \
            -p:PublishSingleFile=true \
            -p:SelfContained=true \
            -r linux-x64 \
            -o publish/linux-x64

      - name: Create zip archive
        run: |
          cd publish/linux-x64
          zip -r ../../watch3-linux-x64.zip .
          cd ../../

      - name: Upload Linux artifact
        uses: actions/upload-artifact@v4
        with:
          name: watch3-linux-x64
          path: watch3-linux-x64.zip

  build-windows:
    name: Build for Windows
    runs-on: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'

      - name: Publish Native AOT
        run: >
          dotnet publish src/Watch3.csproj
          -c Release
          -p:PublishAot=true
          -p:PublishSingleFile=true
          -p:SelfContained=true
          -r win-x64
          -o publish\win-x64

      - name: Create zip archive
        run: |
          cd publish\win-x64
          pwsh -Command "Compress-Archive -Path .\* -DestinationPath ..\..\watch3-win-x64.zip"

      - name: Upload Windows artifact
        uses: actions/upload-artifact@v4
        with:
          name: watch3-win-x64
          path: watch3-win-x64.zip

  # Job to create a GitHub Release
  release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [build-linux, build-windows]

    steps:
      - name: Download Linux artifact
        uses: actions/download-artifact@v4
        with:
          name: watch3-linux-x64

      - name: Download Windows artifact
        uses: actions/download-artifact@v4
        with:
          name: watch3-win-x64

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            watch3-linux-x64.zip
            watch3-win-x64.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Job to build and push the Docker image
  docker:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: build-linux

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download Linux artifact
        uses: actions/download-artifact@v4
        with:
          name: watch3-linux-x64

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and Push Docker Image
        run: |
          IMAGE_NAME=ghcr.io/${{ github.repository_owner }}/watch3:latest
          mkdir docker-build
          unzip watch3-linux-x64.zip -d docker-build/

          # --- Generate the Dockerfile ---
          cat > docker-build/Dockerfile <<EOF
          FROM mcr.microsoft.com/dotnet/runtime-deps:9.0-azurelinux3.0-distroless
          WORKDIR /app
          COPY Watch3 .
          COPY appsettings.json .
          COPY wwwroot ./wwwroot
          ENTRYPOINT ["/app/Watch3"]
          EOF
          # --- End of Dockerfile generation ---

          # Print the generated Dockerfile for verification
          echo "--- Generated Dockerfile ---"
          cat docker-build/Dockerfile
          echo "--------------------------"

          docker buildx build \
            --platform linux/amd64 \
            --push -t $IMAGE_NAME \
            docker-build 

          echo "Docker image pushed: $IMAGE_NAME"